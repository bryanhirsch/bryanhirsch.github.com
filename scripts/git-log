#!/usr/bin/php
<?php
/**
 * Generate a "git log" post.
 *
 * Usage:
 *  ./scripts/git-log project-ID
 */

main($argv);

function main($argv) {
  if (count($argv) < 2 || $argv[1] == 'help') {
    printf("%s\n", 'Do this:');
    printf("\t%s\n", './scripts/git-log project-ID');
    return;
  }
  else {
    $id = $argv[1];
    //$date = ($argv[2]) ? $argv[2] : date('Y-m-d', time());
    //$filename = sprintf('%s-%s.md', $date, $id);
    $filename = sprintf('%s.md', $id);
  }

  $commands = array(
    sprintf('git log --grep=%s --oneline', $id),
    sprintf('git log --grep=%s', $id),
  );

  // Build post.
  $output = '';
  $output .= _git_log_header();
  foreach ($commands as $command) {
    $output .= _git_log_execute($command);
  }

  $file = 'git-log/' . $filename;
  file_put_contents($file, $output);
  print $file . "\n\n";
}

/**
 * @param $command
 *  String. `git log --options` 
 */
function _git_log_execute($command) {
  $output = '';

  printf("Running:\n\t%s\n", $command);

  // Print command above as header.
  $output .= "\n\n" . $command . "\n\n";

  // Get content from git log.
  $contents = shell_exec($command);  

  // Polish up output.
  $contents = explode("\n", $contents);
  $is_oneline = strpos($command, 'oneline');
  foreach ($contents as $content) {
    // Make commit ID in long log link to GitHub.
    $parts = explode(' ', trim($content));
    $is_commit = ($parts[0] == 'commit') ? TRUE : FALSE;
    $is_author = ($parts[0] == 'Author:') ? TRUE : FALSE;
    $is_date = ($parts[0] == 'Date:') ? TRUE : FALSE;
    if (!$is_oneline && $is_commit) {
      $content = _github_commit_links($content);
    }
    else if ($is_author || $is_date) {
      // Suppress 'Author' line.
      continue;
    }

    // Put oneline in code comment.
    if ($is_oneline) {
      $output .= '    ' . $content . "\n";  
    }
    // Put long log in blockquote.
    else if ($is_commit || $is_author || $is_date) {
      // Like this:
      //
      // > Commit: asdf
      // >
      // > Author: Jane Smith
      $output .= '> ' . $content . "\n>\n";  
    }
    else {
      $output .= '> ' . $content . "\n";  
    }
  }

  $output = $output;

  return $output;
}

/**
 * @param $line
 *  String with commit ID from git log.
 *
 * @param $type
 *  String. E.g. 'oneline' for --oneline
 *  
 * @return
 *  String. Replace commit ID with a link to ID on GitHub.
 */
function _github_commit_links($line, $type = 'default') {
  $parts = explode(' ', trim($line));
  $account = 'bryanhirsch';
  $repo = 'bryanhirsch.github.com';

  switch ($type) {
    case 'oneline':
      $commit = $parts[0];
      break;

    default:
      $commit = $parts[1];
  }  

  $href = sprintf('https://github.com/%s/%s/commit/%s', $account, $repo, $commit);
  //$link = sprintf('<a href="%s">%s</a>', $href, $commit);
  $link = sprintf('[%s](%s)', $commit, $href);
  $line = str_replace($commit, $link, $line);

  return $line;
}

/**
 * Make jekyll header.
 */
function _git_log_header() {
  $output = "---\n";  
  $output .= "layout: post\n";
  $output .= "categories: git-log \n";
  $output .= "---\n";  

  return $output;
}
